import {
  CloudWatchClient,
  ListMetricsCommand,
  Metric,
} from "@aws-sdk/client-cloudwatch";
import { getIsengardCredentialsProvider, integTestAccounts } from "../../commons/Isengard";
import fs from "fs";

/**
 * This simple tool is meant to be used by DashboardCDK to read metrics generated by
 * Hydra from all Integration test accounts.
 * This is needed because Hosting Dashboard needs to know the Hydra metric requester field which is randomly generated
 *
 * ts-node listHydraMetrics.ts
 */

interface AccountHydraMetrics {
  accountId: string;
  region: string;
  airportCode: string;
  metrics: Metric[] | undefined;
}

async function main() {
  const accounts = (await integTestAccounts()).filter(
    (a) => a.stage === "prod"
  );

  const metrics: AccountHydraMetrics[] = [];

  for (let account of accounts) {
    const credentials = getIsengardCredentialsProvider(
      account.accountId,
      "ReadOnly"
    );

    const client = new CloudWatchClient({
      region: account.region,
      credentials,
    });

    const res = await client.send(
      new ListMetricsCommand({
        Namespace: "CodeTest",
        MetricName: "Failed",
        Dimensions: [
          { Name: "SuiteName", Value: "AWSAmplifyHostingCanaryTests" },
          { Name: "Test Vertical", Value: "CANARY" },
        ],
      })
    );

    const accountHydraMetrics: AccountHydraMetrics = {
      accountId: account.accountId,
      region: account.region,
      airportCode: account.airportCode,
      metrics: res.Metrics,
    };

    console.info(JSON.stringify(accountHydraMetrics));
    metrics.push(accountHydraMetrics);
  }

  fs.writeFileSync("./hydraMetrics.json", JSON.stringify(metrics, null, 2));
}

main();
